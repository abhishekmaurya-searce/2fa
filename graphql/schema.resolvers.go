package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	pb "github.com/abhishekmaurya0/2fa/proto"
)

// SignUpUser is the resolver for the signUpUser field.
func (r *mutationResolver) SignUpUser(ctx context.Context, input RegisterUserInput) (*UserResponse, error) {
	req := &pb.RegisterUserRequest{
		Name:     input.Name,
		Email:    input.Email,
		Password: input.Password,
	}
	res, err := r.Client.SignUpUser(ctx, req)
	if err != nil {
		return nil, fmt.Errorf("error in sign up: %s", err)
	}
	fmt.Println(res.Name)
	user := &User_response{
		Name:     res.Name,
		Password: req.Password,
		Email:    req.Email,
	}
	r.DB.Create(user)
	return &UserResponse{
		Name:       res.Name,
		Email:      res.Email,
		OtpEnabled: res.OtpEnabled,
		OtpSecret:  res.OtpSecret,
		PrivateKey: res.PrivateKey,
	}, nil
}

// LoginUser is the resolver for the loginUser field.
func (r *mutationResolver) LoginUser(ctx context.Context, input LoginUserInput) (*UserResponse, error) {
	panic(fmt.Errorf("not implemented: LoginUser - loginUser"))
}

// Enable2fa is the resolver for the enable2FA field.
func (r *mutationResolver) Enable2fa(ctx context.Context, input LoginUserInput) (*UserResponse, error) {
	panic(fmt.Errorf("not implemented: Enable2fa - enable2FA"))
}

// Disable2fa is the resolver for the disable2FA field.
func (r *mutationResolver) Disable2fa(ctx context.Context, input LoginUserInput) (*UserResponse, error) {
	panic(fmt.Errorf("not implemented: Disable2fa - disable2FA"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
